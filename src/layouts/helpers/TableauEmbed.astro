---
// TableauEmbed.astro
---

<div
  class="tableauPlaceholder"
  id="viz1741232842910"
  style="position: relative; width: 100%;"
>
  <noscript>
    <a href="#">
      <img
        alt=" "
        src="https://public.tableau.com/static/images/DE/DEEPP_17251231861900/MainDash/1_rss.png"
        style="position: relative; border: none; width: 100%; height: auto;"
      />
    </a>
  </noscript>
  <object
    class="tableauViz"
    style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: none;"
  >
    <param name="host_url" value="https%3A%2F%2Fpublic.tableau.com%2F" />
    <param name="embed_code_version" value="3" />
    <param
      name="path"
      value="views/DEEPP_17251231861900/MainDash?:language=en-US&:embed=true&publish=yes&:sid=&:redirect=auth"
    />
    <param name="toolbar" value="yes" />
    <param
      name="static_image"
      value="https://public.tableau.com/static/images/DE/DEEPP_17251231861900/MainDash/1.png"
    />
    <param name="animate_transition" value="yes" />
    <param name="display_static_image" value="yes" />
    <param name="display_spinner" value="yes" />
    <param name="display_overlay" value="yes" />
    <param name="display_count" value="yes" />
    <param name="language" value="en-US" />
    <param name="filter" value="publish=yes" />
  </object>
</div>

<script is:inline>
  (function () {
    const containerId = "viz1741232842910";
    let tableauViz = null;
    let resizeObserver = null;
    let cleanupTimeout = null;

    // Configuration
    const VIZ_CONFIG = {
      containerId,
      vizUrl: "views/DEEPP_17251231861900/MainDash",
      options: {
        hideTabs: true,
        device: "auto",
        onFirstInteractive: () => {
          console.log("Tableau visualization loaded");
        },
      },
      aspectRatios: {
        desktop: 0.75, // 4:3
        mobile: 1.77, // 9:16
      },
      breakpoint: 768,
    };

    // Main initialization function
    async function initializeViz() {
      try {
        // Cleanup any existing instance
        await cleanupViz();

        // Load Tableau API if needed
        if (!window.tableau) {
          await new Promise((resolve, reject) => {
            const script = document.createElement("script");
            script.src = "https://public.tableau.com/javascripts/api/viz_v1.js";
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
          });
        }

        // Create new Viz instance
        const container = document.getElementById(containerId);
        tableauViz = new window.tableau.Viz(
          container,
          `https://public.tableau.com/${VIZ_CONFIG.vizUrl}`,
          VIZ_CONFIG.options,
        );

        // Setup responsive behavior
        setupResizeHandler(container);
      } catch (error) {
        console.error("Tableau initialization failed:", error);
      }
    }

    // Responsive layout handling
    function setupResizeHandler(container) {
      resizeObserver = new ResizeObserver(() => {
        cancelAnimationFrame(cleanupTimeout);
        cleanupTimeout = requestAnimationFrame(() => {
          const width = container.offsetWidth;
          const aspect =
            width > VIZ_CONFIG.breakpoint
              ? VIZ_CONFIG.aspectRatios.desktop
              : VIZ_CONFIG.aspectRatios.mobile;
          container.style.paddingBottom = `${aspect * 100}%`;
        });
      });
      resizeObserver.observe(container);
    }

    // Proper cleanup function
    async function cleanupViz() {
      return new Promise((resolve) => {
        if (resizeObserver) {
          resizeObserver.disconnect();
          resizeObserver = null;
        }

        if (tableauViz) {
          // Tableau's dispose is async but doesn't return a promise
          tableauViz.dispose();
          tableauViz = null;

          // Additional cleanup for tableau elements
          const container = document.getElementById("viz1741232842910");
          if (container) {
            container
              .querySelectorAll("iframe")
              .forEach((iframe) => iframe.remove());
            container.innerHTML = ""; // Preserve container element
          }
        }

        cancelAnimationFrame(cleanupTimeout);
        resolve();
      });
    }

    // Initialize when component mounts
    initializeViz();

    // Cleanup when component unmounts
    document.addEventListener("astro:before-swap", cleanupViz);
    window.addEventListener("beforeunload", cleanupViz);
  })();
</script>
