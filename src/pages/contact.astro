---
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import PageHeader from "@/partials/PageHeader.astro";
import { getEntry } from "astro:content";
import type { CollectionEntry } from "astro:content";
import Notice from "@/shortcodes/Notice";

const contact = (await getEntry(
  "contact",
  "-index",
)) as CollectionEntry<"contact">;
const { title, description, meta_title, image } = contact.data;
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  image={image}
>
  <PageHeader title={title} />
  <section class="section-sm">
    <div class="container">
      <div class="row">
        <div class="mx-auto md:col-10 lg:col-6">
          <!-- Add success message container -->
          <div
            id="successMessage"
            class="mt-6
            hidden opacity-0 translate-y-4
            transition-all duration-300 ease-in-out"
          >
            <Notice type="success">
              <span id="successMessageText"></span>
            </Notice>
          </div>
          <form
            id="contactForm"
            method="POST"
            data-contact-url={config.params.contact_form_url}
          >
            <div class="hidden" aria-hidden="true">
              <input type="checkbox" name="botcheck" class="hidden" />
            </div>
            <div class="mb-6">
              <label for="name" class="form-label">
                Full Name <span class="text-red-500">*</span>
              </label>
              <input
                id="name"
                name="name"
                class="form-input"
                placeholder="Budi Susanti"
                type="text"
              />
            </div>
            <div class="mb-6">
              <label for="email" class="form-label">
                Working e-Mail <span class="text-red-500">*</span>
              </label>
              <input
                id="email"
                name="email"
                class="form-input"
                placeholder="budi.susanti@email.com"
                type="email"
              />
            </div>
            <div class="mb-6">
              <label for="message" class="form-label">
                Message <span class="text-red-500">*</span>
              </label>
              <textarea
                id="message"
                name="message"
                class="form-input"
                placeholder="Message goes here..."
                rows="8"></textarea>
            </div>
            <button
              id="submitBtn"
              type="submit"
              class="btn btn-primary g-recaptcha"
              data-sitekey="6LdfBfYqAAAAAFIULe8Wl_X3hGIp3WTpcrpUMiO2"
              data-callback="onSubmit"
              data-action="submit"
            >
              Submit
            </button>
          </form>
        </div>
      </div>
    </div>
  </section>
</Base>

<script
  is:inline
  src="https://www.google.com/recaptcha/enterprise.js?render=6LdfBfYqAAAAAFIULe8Wl_X3hGIp3WTpcrpUMiO2"
></script>

<script is:inline>
  document
    .getElementById("contactForm")
    .addEventListener("submit", async (e) => {
      e.preventDefault();

      const form = e.target;
      const submitBtn = document.getElementById("submitBtn");
      const successMessage = document.getElementById("successMessage");
      const url = form.dataset.contactUrl;

      // Honeypot check
      if (form.botcheck.checked) {
        alert("Bot detected!");
        return;
      }

      try {
        // Basic validation
        const name = form.name.value.trim();
        const email = form.email.value.trim();
        const message = form.message.value.trim();

        if (!name || !email || !message) {
          throw new Error("All fields are required");
        }

        // Add loading state
        submitBtn.disabled = true;
        submitBtn.textContent = "Submitting...";
        submitBtn.classList.remove("btn-primary");

        // Ensure grecaptcha is loaded before executing
        if (typeof grecaptcha === "undefined" || !grecaptcha.enterprise) {
          throw new Error("reCaptcha is not loaded. Please try again later.");
        }

        // Execute reCaptcha and get token
        await new Promise((resolve, reject) => {
          grecaptcha.enterprise.ready(() => resolve());
        });

        const token = await grecaptcha.enterprise.execute(
          "6LdfBfYqAAAAAFIULe8Wl_X3hGIp3WTpcrpUMiO2",
          { action: "submit" },
        );

        // Send form data
        const response = await fetch(url, {
          method: "POST",
          body: new URLSearchParams({
            name: name,
            email: email,
            message: message,
            recaptchaToken: token,
          }),
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
          },
        });

        const result = await response.json();

        if (result.status === "success") {
          const successText = document.getElementById("successMessageText");
          successText.innerHTML = `
              Thank you, <strong>${name}</strong>! ðŸŒŸ
              <div class="mt-4 p-3 border rounded-lg">
                <div>Your message:</div>
                <div>${message.substring(0, 50)}...</div>
              </div>
              <div class="mt-4">I'll respond to <strong>${email}</strong> within 24 hours.</div>
            `;

          form.reset();

          // Scroll to top
          window.scrollTo({ top: 0, behavior: "smooth" });

          // Show and animate success message
          successMessage.classList.remove("hidden");
          successMessage.offsetWidth;
          successMessage.classList.remove("opacity-0", "translate-y-4");
          successMessage.classList.add("opacity-100", "translate-y-0");

          // Automatically hide after some seconds with exit animation
          setTimeout(() => {
            successMessage.classList.remove("opacity-100", "translate-y-0");
            successMessage.classList.add("opacity-0", "translate-y-4");

            setTimeout(() => {
              successMessage.classList.add("hidden");
            }, 300);
          }, 6000);
        } else {
          throw new Error(result.message || "Submission failed");
        }
      } catch (error) {
        alert(error.message);
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        submitBtn.textContent = "Submit";
        submitBtn.classList.add("btn-primary");
      }
    });
</script>
